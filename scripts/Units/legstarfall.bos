#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, cog, cog1, cog2, cog3, cog4, stand, tubes, f11,f12,f13,f14,f15,f21,f22,f23,f24,f25,f26,f31,f32,f33,f34,f35,f36,f37,f41,f42,f43,f44,f45,f46,f47,f48,f51,f52,f53,f54,f55,f56,f57,f58,f59,f61,f62,f63,f64,f65,f66,f67,f68,f71,f72,f73,f74,f75,f76,f77,f81,f82,f83,f84,f85,f86,f91,f92,f93,f94,f95;

static-var  guncount, restore_delay, shotcount, spin_speed, spin_delay, time_to_reload, fire_rotation, last_primary_heading, last_primary_pitch, last_visual_heading;

// Signal definitions
#define SIG_AIM				2
#define SIG_FIRE			4

#define SMOKEPIECE base
#include "smokeunit_thread_nohit.h"

Create()
{




	turn tubes to x-axis <20> speed <20>;

	guncount = 60;//changed to 0 first fire cycle
	restore_delay = 500;

	last_primary_heading = -1000000;
	last_visual_heading = 0;
	last_primary_pitch = 0;
	return (0);
}

lua_UnitScriptLight(lightIndex, count) 
{
	return 0;
}

RestoreAfterDelay()
{
	return (0);
}

AimPrimary(heading, pitch)
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;

	turn cog to y-axis heading speed <15.000000>;

	//turn other cogs
	//thanks to Zecrus for wrangling the maths for the spinny blighters
	
	
	
	//seems first rotation can be wrong (as no reference available) and if so that misaligns the gears for every turn thereafter - but at least they turn the right way

	// values in <> are degrees per second
	// otherwise angles are in COB angular unit (cau) - There are 65536 cau in a circle
	// In general, 6 cau per frame ~= 1 degree per second
	// only wait-for-turn if it takes more than 3 frames to finish the turn
	if ( (last_visual_heading - heading) > <0> AND (last_visual_heading - heading) < <180> )
	{
		// seems to take 3 frames for wait-for-turn to process
		//wait-for-turn cog around y-axis;
		spin cog1 around y-axis speed <80.000000>;
		spin cog2 around y-axis speed <80.000000>;
		spin cog3 around y-axis speed <80.000000>;
		spin cog4 around y-axis speed <80.000000>;
		wait-for-turn cog around y-axis;
		stop-spin cog1 around y-axis;
		stop-spin cog2 around y-axis;
		stop-spin cog3 around y-axis;
		stop-spin cog4 around y-axis;
	}
	if ( (last_visual_heading - heading) < <0> OR (last_visual_heading - heading) > <180> )
	{
		// seems to take 3 frames for wait-for-turn to process
		//wait-for-turn cog around y-axis;
		spin cog1 around y-axis speed <-80.000000>;
		spin cog2 around y-axis speed <-80.000000>;
		spin cog3 around y-axis speed <-80.000000>;
		spin cog4 around y-axis speed <-80.000000>;
		wait-for-turn cog around y-axis;
		stop-spin cog1 around y-axis;
		stop-spin cog2 around y-axis;
		stop-spin cog3 around y-axis;
		stop-spin cog4 around y-axis;
	}
	last_visual_heading = heading;
	last_primary_heading = heading;
	last_primary_pitch = pitch;
	start-script RestoreAfterDelay();
	return (1);
}

FirePrimary() {
	
	shotcount = shotcount + 1;
	call-script lua_UnitScriptLight(1, shotcount);





	// FirePrimary controls animation right after firing
	// but after 1 second, AimPrimary should regain control over spindle animation
	// and last_primary_heading and last_primary_pitch should be reset
	signal SIG_FIRE;
	set-signal-mask SIG_FIRE;
	sleep 1000;
	fire_rotation = FALSE;
	last_primary_heading = -1000000;
	last_primary_pitch = 0;

	//add lighting
}

Shot1(heading,pitch) {
	
	
	++guncount;
	if (guncount==61) guncount = 0;


}

QueryPrimary(piecenum)
{

		piecenum = guncount+8;

}

AimFromPrimary(piecenum)
{
	piecenum = stand;
}

SweetSpot(piecenum)
{
	piecenum = stand;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1 ;
		return(corpsetype);
	}
	if( severity <= 50 )
	{
		corpsetype = 2 ;
		return(corpsetype);
	}
	corpsetype = 3 ;
	return(corpsetype);
}
